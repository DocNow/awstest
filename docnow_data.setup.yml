---
- hosts: localhost
  connection: local
  gather_facts: false
  vars_files:
    - aws_credentials.yml

  tasks:
  - name: create the docnow bucket
    s3_bucket:
      name: docnowcloudformbucket
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'

  - name: create the tweet bucket
    s3_bucket:
      name: docnowtweetbucket
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'

  - name: create a policy document
    iam_policy:
      iam_type: role
      iam_name: docnow
      policy_name: docnowlambdapolicy
      state: present
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      policy_document: policy.json

  - name: create lambda role 
    iam_role:
      name: docnowlambdarole
      state: present
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'

  - name: put lambda file in s3 bucket
    s3:
      bucket: docnowcloudformbucket
      object: indexTweets.zip
      mode: put
      src: IndexTweets.zip
      permission: public-read
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'

  - name: launch cloudformation
    cloudformation:
      stack_name: 'docnows3elasticdemo'
      state: present
      template: 'docnow_cloudform.json'
      region: '{{ awsregion }}'
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'

  - name: create lambda function
    lambda:
      name: 'docnowlambdafunction'
      state: present
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      #      s3_bucket: 'docnowcloudformbucket'
      zip_file: 'IndexTweets.zip'
      runtime: 'python2.7'
      # s3_key: 'IndexTweets.zip'
      region: '{{ awsregion }}'
      role: 'arn:aws:iam::*'
      handler: 'IndexTweets.handler'
